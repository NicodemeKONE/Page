cd C:\Users\nicoe\Desktop\deploiement_model_python
git init
git add .
git commit -m "Initial commit"
git remote add origin https://github.com/Nicko887/Deploiement_modele.git
git push -u origin master




Commencez par changer le répertoire de travail actuel vers celui de votre projet en utilisant la commande 
cd C:\Users\nicoe\Desktop\deploiement_model_python. 

Cela vous place dans le dossier où votre projet est situé. 

Une fois dans le bon répertoire, initialisez un nouveau dépôt Git avec la commande 
git init. 

Cette commande crée un sous-répertoire .git qui contient tous les fichiers nécessaires pour gérer les versions de votre projet. 

Ensuite, ajoutez tous les fichiers de ce répertoire au suivi de Git en utilisant la commande 
git add .

Le point (.) indique à Git d'ajouter tous les fichiers et dossiers du répertoire actuel. 

Après avoir ajouté les fichiers, enregistrez ces modifications dans un commit initial avec la commande 
git commit -m "Initial commit"

Le flag -m permet d'inclure un message de commit directement dans la ligne de commande, 
ici "Initial commit", ce qui aide à décrire ce que contient le commit.

Ensuite, configurez un dépôt distant en utilisant la commande 
git remote add origin https://github.com/Nicko887/Deploiement_modele.git. 

Cela lie votre dépôt local à un dépôt distant sur GitHub, nommé "origin". Cette étape est essentielle pour permettre à Git de synchroniser les modifications entre votre machine locale et le dépôt distant. 
Enfin, poussez les modifications locales vers le dépôt distant avec la 
commande git push -u origin master

Le flag -u (ou --set-upstream) associe la branche locale actuelle (par défaut master) à la branche distante, facilitant ainsi les futurs push et pull. Cette commande envoie les commits que vous avez effectués localement 
au dépôt distant, rendant votre projet accessible et partageable via GitHub.

En résumé, ces commandes permettent de préparer votre projet pour le suivi de version, d'enregistrer un état initial, de configurer un dépôt distant pour le partage et la collaboration, et de synchroniser votre travail 
local avec ce dépôt distant.








Créer et Gérer des Branches :

git branch : Affiche la liste des branches locales.
git branch nom_de_branche : Crée une nouvelle branche.
git checkout nom_de_branche : Bascule vers une branche spécifique.
git merge nom_de_branche : Fusionne une branche avec la branche actuelle.
git branch -d nom_de_branche : Supprime une branche après fusion.

Voir l'Histoire et les Modifications :

git log : Affiche l'historique des commits.
git diff : Affiche les différences entre les versions.
git blame nom_de_fichier : Montre qui a modifié chaque ligne d'un fichier.

Annuler et Revenir en Arrière :

git revert id_commit : Annule un commit spécifique en créant un nouveau commit.
git reset --hard id_commit : Réinitialise l'index et le répertoire de travail à un commit spécifique (ATTENTION : cette opération peut entraîner une perte de travail non sauvegardé).

Gérer les Modifications Non Sauvegardées :

git stash : Met de côté les modifications locales non sauvegardées.
git stash apply : Applique les modifications mises de côté précédemment.
git stash drop : Supprime les modifications mises de côté une fois appliquées.

Travailler avec des Dépôts Distants :

git remote -v : Affiche les dépôts distants associés au projet.
git fetch : Télécharge les dernières modifications depuis le dépôt distant.
git pull : Récupère et fusionne les modifications depuis le dépôt distant.
git clone url_du_depot : Clone un dépôt distant vers votre machine locale.

Étiqueter les Commits :

git tag : Affiche la liste des tags.
git tag -a nom_tag -m "Description du tag" : Crée un nouveau tag annoté avec une description.
git push origin nom_tag : Pousse un tag vers le dépôt distant.

Personnaliser Git :

git config : Configure les options Git.
git config --global user.name "Votre nom" : Configure votre nom d'utilisateur Git.
git config --global user.email "votre@email.com" : Configure votre adresse e-mail Git.

Collaboration et Gestion des Conflits :

git pull --rebase : Récupère les modifications et réapplique vos commits locaux sur le dessus.
git mergetool : Ouvre un outil de fusion pour résoudre les conflits de fusion.






### Développer un projet en cours sans créer des commits à chaque modification

1. **Utiliser une branche de développement** :
   - Créez une nouvelle branche pour travailler sur vos modifications.
     ```bash
     git checkout -b dev-branch
     ```

2. **Travailler sur la branche** :
   - Effectuez vos modifications et testez-les dans cette branche.

3. **Staging sélectif** :
   - Ajoutez uniquement les modifications spécifiques que vous souhaitez inclure dans le prochain commit.
     ```bash
     git add fichier1.txt
     git add fichier2.txt
     ```
   - Vérifiez les modifications ajoutées à l'index.
     ```bash
     git status
     ```
   - Créez un commit avec un message descriptif une fois satisfait des modifications ajoutées.
     ```bash
     git commit -m "Message descriptif"
     ```

4. **Amender des commits** :
   - Utilisez `git commit --amend` pour ajouter des modifications supplémentaires ou ajuster le message du dernier commit.
     ```bash
     git add fichier3.txt
     git commit --amend
     ```
   - Changez le message du dernier commit si nécessaire.
     ```bash
     git commit --amend -m "Nouveau message"
     ```

5. **Utiliser le stash** :
   - Stashez les modifications temporairement pour les enregistrer sans créer de commit.
     ```bash
     git stash
     ```
   - Appliquez les modifications stasées lorsque vous êtes prêt à les committer.
     ```bash
     git stash apply
     ```

6. **Réécrire l'historique avec rebase interactif** :
   - Commencez un rebase interactif pour organiser vos commits avant de les pousser.
     ```bash
     git rebase -i HEAD~n
     ```
   - Utilisez les commandes de l'éditeur interactif pour ajuster vos commits (`pick`, `squash`, `reword`).

### Exemple concret

1. **Créer une branche de développement** :
   ```bash
   git checkout -b dev-branch








# Vérifier la configuration du dépôt distant
git remote -v

# Vérifier les autorisations avec un fetch
git fetch origin

# Faire une petite modification et pousser pour vérifier les autorisations de push
echo "test de connexion" > test.txt
git add test.txt
git commit -m "Test de connexion avec GitHub"
git push origin main

# Configurer l'authentification via token d'accès personnel (PAT) ou SSH

## Générer un PAT sur GitHub :
# 1. Allez dans vos paramètres GitHub > Developer settings > Personal access tokens > Generate new token.
# 2. Utilisez le PAT comme mot de passe lors de la prochaine opération Git nécessitant une authentification.

## Générer et ajouter une clé SSH :
# 1. Générer une clé SSH
ssh-keygen -t ed25519 -C "votre_email@example.com"

# 2. Ajouter la clé SSH à l'agent SSH
ssh-add ~/.ssh/id_ed25519

# 3. Ajouter la clé SSH à GitHub
# Copiez le contenu de ~/.ssh/id_ed25519.pub et ajoutez-le à vos clés SSH dans les paramètres de votre compte GitHub.

# 4. Changer l'URL du dépôt distant pour utiliser SSH
git remote set-url origin git@github.com:utilisateur/repo.git







# Récapitulatif des commandes Git pour mettre à jour un commit en local à partir de GitHub

# 1. Assurez-vous que votre dépôt local est à jour avec les dernières modifications distantes
# Cette commande récupère les dernières modifications de toutes les branches du dépôt distant sans les fusionner.
git fetch origin

# 2. Assurez-vous d'être sur la branche locale où vous voulez fusionner les modifications
# Remplacez 'feature-branch' par le nom de votre branche locale actuelle.
git checkout feature-branch

# 3. Fusionner les modifications de la branche 'main' du dépôt distant dans votre branche locale
# Cette commande combine les modifications de 'origin/main' avec votre branche locale actuelle.
git merge origin/main

# 4. Résoudre les conflits (si nécessaire)
# Si des conflits surviennent lors de la fusion, Git vous demandera de les résoudre manuellement.
# Ouvrez les fichiers avec des conflits et résolvez-les, puis ajoutez les fichiers résolus à l'index.
git add fichier_conflit.txt

# Finalisez la fusion en créant un commit de fusion, si Git ne l'a pas déjà fait automatiquement.
git commit -m "Résolution des conflits de fusion avec origin/main"

# Si aucun conflit n'a été détecté, Git aura automatiquement créé un commit de fusion.
# Vous pouvez vérifier l'historique des commits pour vous assurer que la fusion a été réussie.
git log

# La branche locale 'feature-branch' est maintenant à jour avec les dernières modifications de 'main' du dépôt distant.